---
const { app } = Astro.props;
import ButtonGoogle from "../components/button-google.astro";
import ErrorMessage from "../components/error-message.astro";
import SuccessMessage from "../components/success-message.astro";
---

<section class="bg-gray-50 dark:bg-gray-900">
  <div
    class="flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0"
  >
    <div class="flex flex-col items-center justify-center gap-2 mb-6">
      <a
        href="#"
        id="app-name"
        class="flex items-center text-2xl font-semibold text-gray-900 dark:text-white"
      >
        {app}
      </a>
    </div>
    <div
      class="w-full bg-white rounded shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700"
    >
      <div class="p-6 space-y-4 md:space-y-6 sm:p-8">
        <h1
          class="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white"
        >
          Create an account
        </h1>

        <form class="space-y-4 md:space-y-6" id="registration-form">
          <div>
            <label
              for="name"
              class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
              >Name</label
            >
            <input
              type="text"
              name="name"
              id="name"
              class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-gray-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="John Doe"
              required
            />
          </div>
          <div>
            <label
              for="email"
              class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
              >Email</label
            >
            <input
              type="email"
              name="email"
              id="email"
              class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-gray-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="name@provider.com"
              required
            />
          </div>
          <div>
            <label
              for="password"
              class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
              >Password</label
            >
            <input
              type="password"
              name="password"
              id="password"
              placeholder="••••••••"
              class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-gray-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              required
              minlength="6"
            />
          </div>
          <div>
            <label
              for="confirm-password"
              class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
              >Confirm password</label
            >
            <input
              type="password"
              name="confirm-password"
              id="confirm-password"
              placeholder="••••••••"
              class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-gray-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              required
            />
          </div>
          <div class="flex items-start">
            <div class="flex items-center h-5">
              <input
                id="terms"
                aria-describedby="terms"
                type="checkbox"
                class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-gray-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-gray-600 dark:ring-offset-gray-800"
                required
              />
            </div>
            <div class="ml-3 text-sm">
              <label
                for="terms"
                class="font-light text-gray-500 dark:text-gray-300"
                >I accept the <a
                  class="font-medium text-primary-600 hover:underline dark:text-primary-500"
                  href="#">Terms and Conditions</a
                ></label
              >
            </div>
          </div>
          <div class="flex flex-col my-4">
            <SuccessMessage />
            <ErrorMessage />
          </div>
          <button
            type="submit"
            class="w-full bg-black hover:opacity-75 transition-all duration-200 cursor-pointer text-white bg-gray600 hover:bg-gray700 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded text-sm px-5 py-2.5 text-center dark:bg-gray600 dark:hover:bg-gray700 dark:focus:ring-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"
            >Create an account</button
          >
          <ButtonGoogle />
          <p class="text-sm font-light text-gray-500 dark:text-gray-400">
            Already have an account? <a
              href="/login"
              class="font-medium underline text-primary-600 hover:underline dark:text-primary-500"
              >Login here</a
            >
          </p>
        </form>
      </div>
    </div>
    <a href="guimox.dev" class="mt-8 underline">guimox.dev</a>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const password = document.getElementById("password") as HTMLInputElement;
    const confirmPassword = document.getElementById(
      "confirm-password"
    ) as HTMLInputElement;
    const submitButton = document.querySelector(
      'button[type="submit"]'
    ) as HTMLButtonElement;
    const form = document.getElementById(
      "registration-form"
    ) as HTMLFormElement;
    const errorMessage = document.getElementById(
      "error-message"
    ) as HTMLElement;
    const successMessage = document.getElementById(
      "success-message"
    ) as HTMLElement;
    const errorText = document.getElementById("error-text") as HTMLElement;
    const successText = document.getElementById("success-text") as HTMLElement;

    function showError(message: string) {
      errorText.textContent = message;
      errorMessage.classList.remove("hidden");
      successMessage.classList.add("hidden");
    }

    function showSuccess(message: string) {
      successText.textContent = message;
      successMessage.classList.remove("hidden");
      errorMessage.classList.add("hidden");
    }

    function hideMessages() {
      errorMessage.classList.add("hidden");
      successMessage.classList.add("hidden");
    }

    function validatePasswords() {
      if (
        password.value &&
        confirmPassword.value &&
        password.value !== confirmPassword.value
      ) {
        confirmPassword.setCustomValidity("Passwords do not match");
        confirmPassword.classList.add("border-red-500");
      } else {
        confirmPassword.setCustomValidity("");
        confirmPassword.classList.remove("border-red-500");
      }
    }

    password.addEventListener("input", validatePasswords);
    confirmPassword.addEventListener("input", validatePasswords);

    form.addEventListener("submit", async function (e) {
      e.preventDefault();

      hideMessages();

      const formData = new FormData(form);
      const name = formData.get("name") as string;
      const email = formData.get("email") as string;
      const passwordValue = formData.get("password") as string;
      const confirmPasswordValue = formData.get("confirm-password") as string;

      if (!name || !email || !passwordValue || !confirmPasswordValue) {
        showError("All fields are required.");
        return;
      }

      if (passwordValue !== confirmPasswordValue) {
        showError("Passwords do not match.");
        return;
      }

      if (passwordValue.length < 6) {
        showError("Password must be at least 6 characters long.");
        return;
      }

      submitButton.disabled = true;
      submitButton.textContent = "Creating account...";

      let appName = document.getElementById("app-name")?.textContent;
      if (appName?.trim() === "localhost") appName = "guimox";

      try {
        console.log("Registering user:", { name, email });
        const result = await fetch("http://localhost:8080/auth/signup", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            email,
            password: passwordValue,
            app: appName,
          }),
        });

        if (!result.ok) {
          const errorResponse = await result.text();
          console.error(`API Error (${result.status}):`, errorResponse);

          let errorMsg = "";
          switch (result.status) {
            case 400:
              errorMsg = "Invalid email or password format.";
              break;
            case 409:
              errorMsg = "An account with this email already exists.";
              break;
            case 429:
              errorMsg =
                "Too many registration attempts. Please try again later.";
              break;
            case 500:
              errorMsg = "Server error. Please try again later.";
              break;
            default:
              errorMsg = "Registration failed. Please try again.";
          }
          showError(errorMsg);
          return;
        }

        const response = await result.json();
        console.log("Success:", response);
        showSuccess("Account created. Check your email for verification.");

        form.reset();
      } catch (error) {
        console.error("Registration error:", error);
        showError("An unexpected error occurred. Please try again.");
      } finally {
        submitButton.disabled = false;
        submitButton.textContent = "Create an account";
      }
    });
  });
</script>
